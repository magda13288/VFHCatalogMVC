// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VFHCatalogMVC.Infrastructure;

namespace VFHCatalogMVC.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230125132749_DeleteMessageAnswerTable")]
    partial class DeleteMessageAnswerTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("LogoPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("REGON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.CompanyContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Possition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyContactInformations");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDetailInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactDetailTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeed", b =>
                {
                    b.Property<int>("PlantSeedId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("int");

                    b.HasKey("PlantSeedId", "ContactDetailId");

                    b.HasIndex("ContactDetailId");

                    b.ToTable("ContactDetailForSeeds");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeedling", b =>
                {
                    b.Property<int>("PlantSeedlingId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("int");

                    b.HasKey("PlantSeedlingId", "ContactDetailId");

                    b.HasIndex("ContactDetailId");

                    b.ToTable("ContactDetailForSeedlings");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("FruitSizes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("FruitTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowingSeazon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrowingSeazons");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("GrowthTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAnswer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlant", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NewUserPlants");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlantMessage", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("PlantId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("NewUserPlantMessages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDestination", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("PlantDetailId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("PlantDestinations");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FruitSizeId")
                        .HasColumnType("int");

                    b.Property<int?>("FruitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlantPassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("FruitSizeId");

                    b.HasIndex("FruitTypeId");

                    b.HasIndex("PlantRef")
                        .IsUnique();

                    b.ToTable("PlantDetails");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetailsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantDetailId");

                    b.ToTable("PlantDetailsImages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("PlantGroups");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowingSeazon", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("GrowingSeazonId")
                        .HasColumnType("int");

                    b.HasKey("PlantDetailId", "GrowingSeazonId");

                    b.HasIndex("GrowingSeazonId");

                    b.ToTable("PlantGrowingSeazons");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowthType", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("GrowthTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlantDetailId", "GrowthTypeId");

                    b.HasIndex("GrowthTypeId");

                    b.ToTable("PlantGrowthTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantOpinions");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.ToTable("PlantSections");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantSeeds");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeedling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantSeedlings");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantTag", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PlantId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PlantTags");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.TypeOfAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ForFree")
                        .HasColumnType("bit");

                    b.Property<bool>("None")
                        .HasColumnType("bit");

                    b.Property<int>("PlantRef")
                        .HasColumnType("int");

                    b.Property<bool>("Seed")
                        .HasColumnType("bit");

                    b.Property<bool>("Seedling")
                        .HasColumnType("bit");

                    b.Property<bool>("ToReplace")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlantRef")
                        .IsUnique();

                    b.ToTable("TypeOfAvailabilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Address", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Country", "Country")
                        .WithMany("Adresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Region", "Region")
                        .WithMany("Address")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.City", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.CompanyContactInformation", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("CustomerContactInformation")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetail", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetailType", "ContactDetailType")
                        .WithMany()
                        .HasForeignKey("ContactDetailTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeed", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetail", "ContactDetail")
                        .WithMany("ContactDetailForSeeds")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSeed", "PlantSeed")
                        .WithMany("ContactDetailForSeeds")
                        .HasForeignKey("PlantSeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeedling", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetail", "ContactDetail")
                        .WithMany("ContactsForSeedling")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSeedling", "PlantSeedling")
                        .WithMany("ContactDetailForSeedlings")
                        .HasForeignKey("PlantSeedlingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitSize", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("FruitSizes")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("FruitSizes")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("FruitSizes")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitType", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("FruitTypes")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("FruitTypes")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("FruitTypes")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowthType", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("GrowthTypes")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("GrowthTypes")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("GrowthTypes")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Message", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageReceiver", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlant", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("NewUserPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("NewUserPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlantMessage", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "Message")
                        .WithMany("NewUserPlantMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("NewUserPlantMessages")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Plant", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("Plants")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("Plants")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDestination", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Destination", "Destinations")
                        .WithMany("PlantDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantDestinations")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetail", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Color", "Color")
                        .WithMany("PlantDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitSize", "FruitSize")
                        .WithMany("PlantDetails")
                        .HasForeignKey("FruitSizeId");

                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitType", "FruitType")
                        .WithMany("PlantDetails")
                        .HasForeignKey("FruitTypeId");

                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithOne("PlantDetail")
                        .HasForeignKey("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetailsImages", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantDetailsImages")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGroup", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("PlantGroups")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowingSeazon", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.GrowingSeazon", "GrowingSeazon")
                        .WithMany("PlantGrowingSeazons")
                        .HasForeignKey("GrowingSeazonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantGrowingSeazons")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowthType", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.GrowthType", "GrowthType")
                        .WithMany("PlantGrowthTypes")
                        .HasForeignKey("GrowthTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantGrowthTypes")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantOpinion", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantOpinions")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantOpinions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSection", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("PlantSections")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeed", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantSeeds")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantSeeds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeedling", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantSeedlings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantSeedlings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantTag", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantTags")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Tag", "Tag")
                        .WithMany("PlantTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Region", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.TypeOfAvailability", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithOne("TypeOfAvailability")
                        .HasForeignKey("VFHCatalogMVC.Domain.Model.TypeOfAvailability", "PlantRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
