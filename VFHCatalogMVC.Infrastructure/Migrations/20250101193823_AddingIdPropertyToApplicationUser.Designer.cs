// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VFHCatalogMVC.Infrastructure;

namespace VFHCatalogMVC.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250101193823_AddingIdPropertyToApplicationUser")]
    partial class AddingIdPropertyToApplicationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "d72ad762-d626-4e4d-a2db-d4ee41e4abe7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "PrivateUser",
                            ConcurrencyStamp = "d72cc627-699f-46df-99d5-4f27a3a4fcf5",
                            Name = "PrivateUser",
                            NormalizedName = "PRIVATE_USER"
                        },
                        new
                        {
                            Id = "Company",
                            ConcurrencyStamp = "77f520fd-fbad-4b96-b87d-8d43a180e473",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("LogoPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("REGON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.AuditTrial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedColumnsJson")
                        .HasColumnName("ChangedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NewValuesJson")
                        .HasColumnName("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValuesJson")
                        .HasColumnName("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TrailType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EntityName");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrials");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Katowice",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gliwice",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zabrze",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sosnowiec",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bytom",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rybnik",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chorzów",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tychy",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dąbrowa Górnicza",
                            RegionId = 12
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jaworzno",
                            RegionId = 12
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Indigo"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Multicolor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Yellow"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.CompanyContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Possition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyContactInformations");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDetailInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactDetailTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeed", b =>
                {
                    b.Property<int>("PlantSeedId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("int");

                    b.HasKey("PlantSeedId", "ContactDetailId");

                    b.HasIndex("ContactDetailId");

                    b.ToTable("ContactDetailForSeeds");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeedling", b =>
                {
                    b.Property<int>("PlantSeedlingId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("int");

                    b.HasKey("PlantSeedlingId", "ContactDetailId");

                    b.HasIndex("ContactDetailId");

                    b.ToTable("ContactDetailForSeedlings");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Poland"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ground"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Under covers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pot"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FruitSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not specified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Small"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cherry type"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Large-fruited"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Medium-fruited"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitSizeForListFilters", b =>
                {
                    b.Property<int>("FruitSizeId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.HasKey("FruitSizeId", "PlantTypeId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("PlantGroupId", "PlantSectionId");

                    b.ToTable("FruitSizeForListFilters");

                    b.HasData(
                        new
                        {
                            FruitSizeId = 2,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            FruitSizeId = 3,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            FruitSizeId = 4,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            FruitSizeId = 5,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FruitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not specified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fleshy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Multichambered"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spicy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sweet"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitTypeForListFilters", b =>
                {
                    b.Property<int>("FruitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.HasKey("FruitTypeId", "PlantTypeId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("PlantGroupId", "PlantSectionId");

                    b.ToTable("FruitTypeForListFilters");

                    b.HasData(
                        new
                        {
                            FruitTypeId = 2,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            FruitTypeId = 3,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            FruitTypeId = 4,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 2
                        },
                        new
                        {
                            FruitTypeId = 5,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 2
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowingSeazon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrowingSeazons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Late"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Early"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mid-late"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mid-early"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Annual"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Perennial"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrowthTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not specified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tall growing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dwarf"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Potted"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Determinate"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Shrub"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sweet"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bush"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tree"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Climbing plant"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hanging plant"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Vine"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Root"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowthTypesForListFilters", b =>
                {
                    b.Property<int>("GrowthTypesId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.HasKey("GrowthTypesId", "PlantTypeId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("PlantGroupId", "PlantSectionId");

                    b.ToTable("GrowthTypesForListFilters");

                    b.HasData(
                        new
                        {
                            GrowthTypesId = 2,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            GrowthTypesId = 3,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            GrowthTypesId = 4,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            GrowthTypesId = 5,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 1
                        },
                        new
                        {
                            GrowthTypesId = 6,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 2
                        },
                        new
                        {
                            GrowthTypesId = 6,
                            PlantTypeId = 2
                        },
                        new
                        {
                            GrowthTypesId = 7,
                            PlantTypeId = 1,
                            PlantGroupId = 1,
                            PlantSectionId = 2
                        },
                        new
                        {
                            GrowthTypesId = 8,
                            PlantTypeId = 2
                        },
                        new
                        {
                            GrowthTypesId = 9,
                            PlantTypeId = 2
                        },
                        new
                        {
                            GrowthTypesId = 10,
                            PlantTypeId = 2
                        },
                        new
                        {
                            GrowthTypesId = 11,
                            PlantTypeId = 3
                        },
                        new
                        {
                            GrowthTypesId = 12,
                            PlantTypeId = 3
                        },
                        new
                        {
                            GrowthTypesId = 13,
                            PlantTypeId = 3
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAnswer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageAnswer", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageAnswerId")
                        .HasColumnType("int");

                    b.HasKey("MessageId", "MessageAnswerId");

                    b.HasIndex("MessageAnswerId");

                    b.ToTable("MessageAnswers");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlant", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NewUserPlants");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantSectionId")
                        .HasColumnType("int");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.HasIndex("PlantSectionId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDestination", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantDetailId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("PlantDestinations");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FruitSizeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FruitTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantPassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantRef")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("FruitSizeId");

                    b.HasIndex("FruitTypeId");

                    b.HasIndex("PlantRef")
                        .IsUnique();

                    b.ToTable("PlantDetails");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetailsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantDetailId");

                    b.ToTable("PlantDetailsImages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("PlantGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nightshade",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cucurbits",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Legumes",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cruciferous",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leafy",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Onion",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Root",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Turnip greens",
                            PlantTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pitted",
                            PlantTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Berry",
                            PlantTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pome",
                            PlantTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Citrus",
                            PlantTypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Exotic",
                            PlantTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Healing",
                            PlantTypeId = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Spicy",
                            PlantTypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Essential oil",
                            PlantTypeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Name = "Outdoor",
                            PlantTypeId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Indoor",
                            PlantTypeId = 4
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowingSeazon", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("GrowingSeazonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantDetailId", "GrowingSeazonId");

                    b.HasIndex("GrowingSeazonId");

                    b.ToTable("PlantGrowingSeazons");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowthType", b =>
                {
                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<int>("GrowthTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantDetailId", "GrowthTypeId");

                    b.HasIndex("GrowthTypeId");

                    b.ToTable("PlantGrowthTypes");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantMessage", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isNewPlant")
                        .HasColumnType("bit");

                    b.Property<bool>("isSeed")
                        .HasColumnType("bit");

                    b.Property<bool>("isSeedling")
                        .HasColumnType("bit");

                    b.HasKey("PlantId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("PlantMessages");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantOpinions");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantGroupId");

                    b.ToTable("PlantSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tomato",
                            PlantGroupId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepper",
                            PlantGroupId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Potato",
                            PlantGroupId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Eggplant",
                            PlantGroupId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other",
                            PlantGroupId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cucumber",
                            PlantGroupId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Zucchini",
                            PlantGroupId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pumpkin",
                            PlantGroupId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Patison",
                            PlantGroupId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Other",
                            PlantGroupId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Beans",
                            PlantGroupId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pea",
                            PlantGroupId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Lentils",
                            PlantGroupId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Broad bean",
                            PlantGroupId = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Other",
                            PlantGroupId = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cabbage",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "Brussels sprouts",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Broccoli",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Cauliflower",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kohlrabi",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 21,
                            Name = "Other",
                            PlantGroupId = 4
                        },
                        new
                        {
                            Id = 22,
                            Name = "Lettuce",
                            PlantGroupId = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Spinach",
                            PlantGroupId = 5
                        },
                        new
                        {
                            Id = 24,
                            Name = "Leaf parsley",
                            PlantGroupId = 5
                        },
                        new
                        {
                            Id = 25,
                            Name = "Other",
                            PlantGroupId = 5
                        },
                        new
                        {
                            Id = 26,
                            Name = "Onion",
                            PlantGroupId = 6
                        },
                        new
                        {
                            Id = 27,
                            Name = "Garlic",
                            PlantGroupId = 6
                        },
                        new
                        {
                            Id = 28,
                            Name = "Leek",
                            PlantGroupId = 6
                        },
                        new
                        {
                            Id = 29,
                            Name = "Other",
                            PlantGroupId = 6
                        },
                        new
                        {
                            Id = 30,
                            Name = "Carrot",
                            PlantGroupId = 7
                        },
                        new
                        {
                            Id = 31,
                            Name = "Root parsley",
                            PlantGroupId = 7
                        },
                        new
                        {
                            Id = 32,
                            Name = "Beetroot",
                            PlantGroupId = 7
                        },
                        new
                        {
                            Id = 33,
                            Name = "Root celery",
                            PlantGroupId = 7
                        },
                        new
                        {
                            Id = 34,
                            Name = "Other",
                            PlantGroupId = 7
                        },
                        new
                        {
                            Id = 35,
                            Name = "Radish",
                            PlantGroupId = 8
                        },
                        new
                        {
                            Id = 36,
                            Name = "Rutabaga",
                            PlantGroupId = 8
                        },
                        new
                        {
                            Id = 37,
                            Name = "Turnip",
                            PlantGroupId = 8
                        },
                        new
                        {
                            Id = 38,
                            Name = "Other",
                            PlantGroupId = 8
                        },
                        new
                        {
                            Id = 39,
                            Name = "Cherries",
                            PlantGroupId = 9
                        },
                        new
                        {
                            Id = 40,
                            Name = "Peach",
                            PlantGroupId = 9
                        },
                        new
                        {
                            Id = 41,
                            Name = "Plum",
                            PlantGroupId = 9
                        },
                        new
                        {
                            Id = 42,
                            Name = "Apricot",
                            PlantGroupId = 9
                        },
                        new
                        {
                            Id = 43,
                            Name = "Other",
                            PlantGroupId = 9
                        },
                        new
                        {
                            Id = 44,
                            Name = "Strawberry",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 45,
                            Name = "Blackberries",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 46,
                            Name = "Blueberries",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 47,
                            Name = "Raspberries",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 48,
                            Name = "Currants",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 49,
                            Name = "Berries",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 50,
                            Name = "Other",
                            PlantGroupId = 10
                        },
                        new
                        {
                            Id = 51,
                            Name = "Apple",
                            PlantGroupId = 11
                        },
                        new
                        {
                            Id = 52,
                            Name = "Pear",
                            PlantGroupId = 11
                        },
                        new
                        {
                            Id = 53,
                            Name = "Quince",
                            PlantGroupId = 11
                        },
                        new
                        {
                            Id = 54,
                            Name = "Pomegranate",
                            PlantGroupId = 11
                        },
                        new
                        {
                            Id = 55,
                            Name = "Other",
                            PlantGroupId = 11
                        },
                        new
                        {
                            Id = 56,
                            Name = "Lemon",
                            PlantGroupId = 12
                        },
                        new
                        {
                            Id = 57,
                            Name = "Tangerine",
                            PlantGroupId = 12
                        },
                        new
                        {
                            Id = 58,
                            Name = "Orange",
                            PlantGroupId = 12
                        },
                        new
                        {
                            Id = 59,
                            Name = "Grapefruit",
                            PlantGroupId = 12
                        },
                        new
                        {
                            Id = 60,
                            Name = "Other",
                            PlantGroupId = 12
                        },
                        new
                        {
                            Id = 61,
                            Name = "Banana",
                            PlantGroupId = 13
                        },
                        new
                        {
                            Id = 62,
                            Name = "Pineapple",
                            PlantGroupId = 13
                        },
                        new
                        {
                            Id = 63,
                            Name = "Lychee",
                            PlantGroupId = 13
                        },
                        new
                        {
                            Id = 64,
                            Name = "Other",
                            PlantGroupId = 13
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantSeeds");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeedling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactivatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantSeedlings");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantTag", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("PlantId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PlantTags");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vegetable"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Herb"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Flower"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Home plant"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Grass"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Dolnośląskie"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Kujawsko-Pomorskie"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Lubelskie"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Lubuskie"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Łódzkie"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Małopolskie"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Mazowieckie"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Opolskie"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Podkarpackie"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Podlaskie"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "Pomorskie"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Name = "Śląskie"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Name = "Świętokrzyskie"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            Name = "Warmińsko-Mazurskie"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            Name = "Wielkopolskie"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            Name = "Zachodniopomorskie"
                        });
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.TypeOfAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ForFree")
                        .HasColumnType("bit");

                    b.Property<bool>("None")
                        .HasColumnType("bit");

                    b.Property<int>("PlantRef")
                        .HasColumnType("int");

                    b.Property<bool>("Seed")
                        .HasColumnType("bit");

                    b.Property<bool>("Seedling")
                        .HasColumnType("bit");

                    b.Property<bool>("ToReplace")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlantRef")
                        .IsUnique();

                    b.ToTable("TypeOfAvailabilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Address", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Country", "Country")
                        .WithMany("Adresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Region", "Region")
                        .WithMany("Address")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.AuditTrial", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.City", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.CompanyContactInformation", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("CustomerContactInformation")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetail", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetailType", "ContactDetailType")
                        .WithMany()
                        .HasForeignKey("ContactDetailTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeed", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetail", "ContactDetail")
                        .WithMany("ContactDetailForSeeds")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSeed", "PlantSeed")
                        .WithMany("ContactDetailForSeeds")
                        .HasForeignKey("PlantSeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.ContactDetailForSeedling", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ContactDetail", "ContactDetail")
                        .WithMany("ContactsForSeedling")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSeedling", "PlantSeedling")
                        .WithMany("ContactDetailForSeedlings")
                        .HasForeignKey("PlantSeedlingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitSizeForListFilters", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitSize", "FruitSize")
                        .WithMany("FruitSizeForFilters")
                        .HasForeignKey("FruitSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("FruitSizeForFilters")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("FruitSizeForFilters")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("FruitSizeForFilters")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.FruitTypeForListFilters", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitType", "FruitType")
                        .WithMany("FruitTypeForFilters")
                        .HasForeignKey("FruitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("FruitTypeForFilters")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("FruitTypeForFilters")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("FruitTypeForFilters")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.GrowthTypesForListFilters", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.GrowthType", "GrowthType")
                        .WithMany("GrowthTypesForListFilters")
                        .HasForeignKey("GrowthTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("GrowthTypesForListFilters")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("GrowthTypesForListFilters")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("GrowthTypesForListFilters")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Message", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageAnswer", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "Message")
                        .WithMany("MessageAnswers")
                        .HasForeignKey("MessageAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "AnswerMessage")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.MessageReceiver", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.NewUserPlant", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("NewUserPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("NewUserPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Plant", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("Plants")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantSection", "PlantSection")
                        .WithMany("Plants")
                        .HasForeignKey("PlantSectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDestination", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Destination", "Destinations")
                        .WithMany("PlantDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantDestinations")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetail", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Color", "Color")
                        .WithMany("PlantDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitSize", "FruitSize")
                        .WithMany("PlantDetails")
                        .HasForeignKey("FruitSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.FruitType", "FruitType")
                        .WithMany("PlantDetails")
                        .HasForeignKey("FruitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithOne("PlantDetail")
                        .HasForeignKey("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantDetailsImages", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantDetailsImages")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGroup", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantType", "PlantType")
                        .WithMany("PlantGroups")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowingSeazon", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.GrowingSeazon", "GrowingSeazon")
                        .WithMany("PlantGrowingSeazons")
                        .HasForeignKey("GrowingSeazonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantGrowingSeazons")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantGrowthType", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.GrowthType", "GrowthType")
                        .WithMany("PlantGrowthTypes")
                        .HasForeignKey("GrowthTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantGrowthTypes")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantMessage", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Message", "Message")
                        .WithMany("PlantMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantMessages")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantOpinion", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantDetail", "PlantDetail")
                        .WithMany("PlantOpinions")
                        .HasForeignKey("PlantDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantOpinions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSection", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.PlantGroup", "PlantGroup")
                        .WithMany("PlantSections")
                        .HasForeignKey("PlantGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeed", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantSeeds")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantSeeds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantSeedling", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantSeedlings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.ApplicationUser", "User")
                        .WithMany("PlantSeedlings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.PlantTag", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithMany("PlantTags")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VFHCatalogMVC.Domain.Model.Tag", "Tag")
                        .WithMany("PlantTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.Region", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VFHCatalogMVC.Domain.Model.TypeOfAvailability", b =>
                {
                    b.HasOne("VFHCatalogMVC.Domain.Model.Plant", "Plant")
                        .WithOne("TypeOfAvailability")
                        .HasForeignKey("VFHCatalogMVC.Domain.Model.TypeOfAvailability", "PlantRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
